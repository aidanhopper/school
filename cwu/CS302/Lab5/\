import java.io.*;
import java.util.*;

public class Lab5
{

    /**
     *  Problem 1: Find the largest integer that appears at least m times.
     */
    private static int problem1(int[] arr, int m)
    {
      
      // create hash map
      HashMap<Integer, Integer> map  = new HashMap<Integer, Integer>(arr.length * 2);

      // add keys to hashmap
      for (int i = 0; i < arr.length; i++) {
	int node = map.getOrDefault(arr[i], 0);
	map.put(arr[i], node + 1);
      }
      
      // search for largest value that occurs at least m times 
      int largestKey = Integer.MIN_VALUE;
      for (Map.Entry n : map.entrySet()) {
	int key = (int) n.getKey();
	int val = (int) n.getValue();
	if (val >= m) {
	  if (key > largestKey) largestKey = key;
	}
      }
      
      return largestKey;  
        
    }

    /**
     *  Problem 2: Find two distinct indices i and j such that arr[i] = arr[j] and |i - j| <= m.
     */
    private static int[] problem2(int[] arr, int m)
    {

      // count num of occurances for each num
      HashMap<Integer, Integer> occ = new HashMap<Integer, Integer>();
      for (int i = 0; i < arr.length; i++) {
	Integer n = occ.getOrDefault(arr[i], 0);
	occ.put(arr[i], n + 1);
      }
      
	
      System.out.println("occs keys: " + occ.keySet());
      System.out.println("occs : " + occ.values());

      // create hash map and populate with correct num of arrays
      HashMap<Integer, Integer[][]> map = new HashMap<Integer, Integer[][]>();
      for (int i = 0; i < arr.length; i++) {
	int occs = occ.get(arr[i]);
	int numOfArrs = (occs * (occs - 1)) / 2;
	if (numOfArrs > 0)
	  map.put((Integer) arr[i], new Integer[numOfArrs][2]);
      }

      System.out.println("arr : " + Arrays.toString(arr));
      System.out.println("keys : " + map.keySet());

      // populate hash map with nums
      for (int i = 0; i < arr.length; i++) {
	int occs = occ.get(arr[i]); 
	if (occs > 1) {
	  int connections = occs - 1;
	  int numOfArrs = (occs * (occs - 1)) / 2;
	  //System.out.println("numOfArrs : " + numOfArrs);
	  // populate arrs with index k number of times
	  int conTracker = 0;
	  for (int k = 0; k < numOfArrs; k++) {
	    Integer[] pair = (Integer[]) map.get(arr[i])[k];
	    if (pair[0] == null) { 
	      pair[0] = i;
	      conTracker++;
	    }
	    else if (pair[1] == null) { 
	      pair[1] = i;
	      conTracker++;
	    }
	    if (conTracker == connections) break;
	  }
	}
      }
      System.out.println("m : " + m);
      for (int i = 0; i < arr.length; i++) {
	int occs = occ.get(arr[i]); 
	if (occs > 1) {
	  int numOfArrs = (occs * (occs - 1)) / 2;
	  for (int k = 0; k < numOfArrs; k++) {
	    Integer[] pair = (Integer[]) map.get(arr[i])[k];
	    //System.out.println(Arrays.toString(pair) + " arr[i] : " + arr[i]);
	    int num = pair[0] - pair[1];
	    //System.out.println(num);
	    if (num < 0) num *= -1;
	    if (num <= m) { 
	      return new int[] { pair[0], pair[1] };
	    }
	  }
	}
      }
      System.out.println();
      // nums can occur more than twice

      int i = -1;
      int j = -1;
      return new int[] { i, j };
    }

    // ---------------------------------------------------------------------
    // Do not change any of the code below!

    private static final int LabNo = 5;
    private static final Random rng = new Random(123456);

    private static boolean testProblem1(int[][] testCase)
    {
        int[] arr = testCase[0];
        int m = testCase[1][0];

        int answer = problem1(arr.clone(), m);       
        
        Arrays.sort(arr);
        
        for (int i = arr.length-1, j = arr.length-1; i >= 0; i = j)
        {
            for (; j >=0 && arr[i] == arr[j]; j--) { }

             if (i - j >= m){
                return answer == arr[i];
             }
        }
        
        

        return false; // Will never happen.
    }

    private static boolean testProblem2(int[][] testCase)
    {
        int[] arr = testCase[0];
        int m = testCase[1][0];

        int[] answer = problem2(arr.clone(), m);

        if (answer == null || answer.length != 2)
        {
            return false;
        }

        Arrays.sort(answer);

        // Check answer
        int i = answer[0];
        int j = answer[1];
        return i != j
            && j - i <= m
            && i >= 0
            && j < arr.length
            && arr[i] == arr[j];
    }

    public static void main(String args[])
    {
        System.out.println("CS 302 -- Lab " + LabNo);
        testProblems(1);
        testProblems(2);
    }

    private static void testProblems(int prob)
    {
        int noOfLines = prob == 1 ? 100000 : 500000;

        System.out.println("-- -- -- -- --");
        System.out.println(noOfLines + " test cases for problem " + prob + ".");

        boolean passedAll = true;

        for (int i = 1; i <= noOfLines; i++)
        {

            int[][] testCase = null;

            boolean passed = false;
            boolean exce = false;

            try
            {
                switch (prob)
                {
                    case 1:
                        testCase = createProblem1(i);
                        passed = testProblem1(testCase);
                        break;

                    case 2:
                        testCase = createProblem2(i);
                        passed = testProblem2(testCase);
                        break;
                }
            }
            catch (Exception ex)
            {
                passed = false;
                exce = true;
            }

            if (!passed)
            {
                System.out.println("Test " + i + " failed!" + (exce ? " (Exception)" : ""));
                passedAll = false;
                break;
            }
        }

        if (passedAll)
        {
            System.out.println("All test passed.");
        }

    }

    private static int[][] createProblem1(int testNo)
    {
        int size = rng.nextInt(Math.min(1000, testNo)) + 5;

        int[] numbers = getRandomNumbers(size, size);
        Arrays.sort(numbers);

        int maxM = 0;

        for (int i = 0, j = 0; i < size; i = j)
        {
            for (; j < size && numbers[i] == numbers[j]; j++) { }
            maxM = Math.max(maxM, j - i);
        }

        int m = rng.nextInt(maxM) + 1;

        shuffle(numbers);

        return new int[][] { numbers, new int[] { m } };
    }

    private static int[][] createProblem2(int testNo)
    {
        int size = rng.nextInt(Math.min(1000, testNo)) + 5;

        int[] numbers = getRandomNumbers(size, size);

        int i = rng.nextInt(size);
        int j = rng.nextInt(size - 1);
        if (i <= j) j++;

        numbers[i] = numbers[j];

        return new int[][] { numbers, new int[] { Math.abs(i - j) } };
    }

    private static void shuffle(int[] arr)
    {
        for (int i = 0; i < arr.length - 1; i++)
        {
            int rndInd = rng.nextInt(arr.length - i) + i;
            int tmp = arr[i];
            arr[i] = arr[rndInd];
            arr[rndInd] = tmp;
        }
    }

    private static int[] getRandomNumbers(int range, int size)
    {
        int numbers[] = new int[size];

        for (int i = 0; i < size; i++)
        {
            numbers[i] = rng.nextInt(2 * range) - range;
        }

        return numbers;
    }
}
